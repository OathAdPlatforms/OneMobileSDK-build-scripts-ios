//  Copyright 2018, Oath Inc.
//  Licensed under the terms of the MIT License. See LICENSE.md file in project root for terms.

import Foundation

/*Creates value type of the form (foo: Type1, boo: Type2) with given case*/
{% macro associatedValueVarMultiType case %}
    ({% for associatedValue in case.associatedValues %}
        {% if associatedValue.localName != nil %}
            {{ associatedValue.localName }}:
        {% endif %}
        {% if associatedValue.typeName != nil %}
            {{ associatedValue.typeName }}{% else %}{{ associatedValue.typeName }}
        {% endif %}{% if associatedValue.isOptional %}?{% endif %}
        {% if not forloop.last %}, {% endif %}
    {% endfor %})?
{% endmacro %}

/*Creates set value of the form (foo: newValue.foo, boo: newValue.boo) with given case and newValue*/
{% macro associatedValueVarMultiSet case newValue %}
    {% for associatedValue in case.associatedValues %}
        {{ associatedValue.localName }}: newValue.{{ associatedValue.localName }}
        {% if not forloop.last %}, {% endif %}
    {% endfor %}
{% endmacro %}

/*Creates set value of the form newValue*/
{% macro associatedValueVarUnitSet case newValue %}
    {% if case.associatedValues.first.localName != nil %}
        {{ case.associatedValues.first.localName }}:
    {% endif %}
    newValue
{% endmacro %}

/*Creates tuple var with given associated value case*/
{% macro associatedValueVar case %}
    /*Optional associated values not supported now*/
    {% if not case.associatedValues.first.isOptional%}
    var {{case.name}}: {% if case.associatedValues.all.count > 1 %}{% call associatedValueVarMultiType case %}{% else %} {{ case.associatedValues.first.typeName }}? {% endif %} {
        guard case let .{{ case.name }}({{ case.name }}) = self else { return nil }
        return {{case.name}}
    }
    {%endif%}
{% endmacro %}

/*Creates Bool var with given simple case*/
{% macro simpleVar case %}
    var is{{ case.name | replace:"`","" | capitalize }}: Bool {
        guard case .{{ case.name }} = self else { return false }
        return true
    }
{% endmacro %}

/*For each public enum with cases count > 0 is created extension with cases' prism vars*/
{% for enum in types.implementing.Prism|enum %}
public extension {{ enum.name }} {
    {% for case in enum.cases %}
        {% if case.hasAssociatedValue %}
            {% call associatedValueVar case %}
        {% else %}
            {% call simpleVar case %}
        {% endif %}
        {% if not forloop.last %}

        {% endif %}
    {% endfor %}
}
{% if not forloop.last %}
{% endif %}
{% endfor %}
